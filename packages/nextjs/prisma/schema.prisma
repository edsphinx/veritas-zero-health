// Prisma Schema - Veritas Zero Health
// Database: PostgreSQL (Neon/Vercel Postgres recommended)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// ENUMS (synchronized with @veritas/types)
// ============================================================================

// User roles - MUST match @veritas/types/src/auth.ts
enum UserRole {
  patient      // Can apply to studies, manage health records
  clinic       // Can issue health credentials, enroll patients
  researcher   // Can create studies, review applications
  sponsor      // Can fund studies
  admin        // Platform admin
  superadmin   // Full platform control
  guest        // Unauthenticated user
}

// Study statuses - MUST match @veritas/types/src/study.ts
enum StudyStatus {
  created    // Study created, not yet funded
  funding    // Accepting sponsor deposits
  recruiting // Recruiting participants
  active     // Fully funded, study in progress
  paused     // Temporarily paused
  completed  // Study finished successfully
  cancelled  // Study cancelled
}

// Application statuses - MUST match @veritas/types/src/enrollment.ts
enum ApplicationStatus {
  pending   // Application submitted, awaiting proof verification
  verified  // ZK proof verified on-chain
  approved  // Researcher/clinic approved application
  rejected  // Application rejected
  enrolled  // Patient enrolled with SBT minted
}

// Milestone types - MUST match @veritas/types/src/study.ts and IStudyTypes.sol
enum MilestoneType {
  enrollment          // 0 - Initial enrollment
  data_submission     // 1 - Data submission milestone
  followup_visit      // 2 - Follow-up visit
  study_completion    // 3 - Final completion
  custom              // 4 - Custom milestone
}

// Milestone statuses - MUST match @veritas/types/src/study.ts and IStudyTypes.sol
enum MilestoneStatus {
  pending      // 0 - Not yet started
  in_progress  // 1 - Currently active
  completed    // 2 - Completed by participant
  verified     // 3 - Verified by provider/researcher
  paid         // 4 - Payment released
}

// Certification levels for medical providers - MUST match @veritas/types/src/provider.ts
enum CertificationLevel {
  none                    // 0 - Not certified
  individual              // 1 - Individual practitioner
  clinic                  // 2 - Medical clinic
  hospital                // 3 - Hospital institution
  government_authority    // 4 - Government health authority
}

// ============================================================================
// USER & AUTH MODELS
// ============================================================================

model User {
  id        String   @id @default(cuid())
  address   String   @unique // Ethereum wallet address (lowercase, checksummed)
  role      UserRole // User's role in the platform

  // Human Passport verification (Sybil resistance)
  isVerified      Boolean   @default(false)
  humanityScore   Int?      // Aggregated score from stamps
  verifiedAt      DateTime?

  // NextAuth fields
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?

  // Timestamps
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastActiveAt DateTime  @default(now())
  deletedAt    DateTime? // Soft delete

  // Optional profile data
  displayName String?
  avatar      String?

  // Relations
  accounts              Account[]
  sessions              Session[]
  passportVerifications PassportVerification[]

  @@index([address])
  @@index([role])
  @@index([isVerified])
  @@map("users")
}

// Role change audit trail
model RoleChange {
  id        String   @id @default(cuid())
  userId    String
  fromRole  UserRole?
  toRole    UserRole
  changedBy String   // Address of admin who made the change
  reason    String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([changedBy])
  @@map("role_changes")
}

// NextAuth Account model (for OAuth providers if needed)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth Verification Token
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================================================
// PASSPORT VERIFICATION MODELS
// ============================================================================

// Gitcoin Passport verification history
// Stores verification scores and stamps for Sybil resistance
model PassportVerification {
  id String @id @default(cuid())

  // User relation
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  address String // Ethereum address (denormalized for queries)

  // Verification results from Gitcoin Passport API
  score         Float   // Numerical humanity score
  threshold     Float   // Score threshold at time of verification
  passingScore  Boolean // Whether score meets threshold
  verified      Boolean // Whether user is verified (score >= minScore)

  // Stamps (JSON object mapping stamp provider to score)
  // Example: {"Google": 2.5, "Twitter": 1.8, "Github": 3.0}
  stampScores Json? // Map of stamp provider -> individual score

  // API Response metadata
  lastScoreTimestamp   DateTime // When Passport API last updated score
  expirationTimestamp  DateTime // When verification expires
  apiResponseRaw       Json?    // Full API response for debugging

  // Verification metadata
  minScoreRequired Float    @default(20) // Minimum score required at time of check
  verifiedAt       DateTime @default(now())

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, verifiedAt]) // One verification per user per timestamp
  @@index([userId])
  @@index([address])
  @@index([verified])
  @@index([verifiedAt])
  @@index([expirationTimestamp])
  @@map("passport_verifications")
}

// ============================================================================
// STUDY MODELS
// ============================================================================

model Study {
  id String @id @default(cuid())

  // Blockchain IDs (source of truth)
  registryId Int @unique // ID from StudyRegistry contract
  escrowId   Int         // ID from ResearchFundingEscrow contract

  // Basic info (indexed from blockchain)
  title             String
  description       String
  researcherAddress String // Creator's wallet address

  // Status
  status StudyStatus

  // Funding (using Decimal for precise calculations)
  totalFunding Decimal @default(0) @db.Decimal(20, 2) // Total funding in USDC

  // Blockchain tracking
  chainId Int @default(11155420) // Optimism Sepolia

  // Transaction hashes for verification
  escrowTxHash   String
  registryTxHash String
  criteriaTxHash String

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Block numbers for event indexing
  escrowBlockNumber   BigInt
  registryBlockNumber BigInt

  // Relations
  deposits     SponsorDeposit[]
  criteria     StudyCriteria?
  milestones   StudyMilestone[]
  applications StudyApplication[]

  @@index([researcherAddress])
  @@index([registryId])
  @@index([escrowId])
  @@index([status])
  @@index([chainId])
  @@map("studies")
}

// Sponsor funding deposits
model SponsorDeposit {
  id String @id @default(cuid())

  // Sponsor info
  sponsorAddress String

  // Study relation
  studyId String
  study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

  // Blockchain IDs
  escrowId Int

  // Deposit details (raw value with 6 decimals for USDC)
  amount BigInt // Amount in smallest unit (e.g., 1000000 = 1 USDC)

  // Blockchain tracking
  chainId         Int    @default(11155420)
  transactionHash String
  blockNumber     BigInt

  // Timestamps
  depositedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([sponsorAddress])
  @@index([studyId])
  @@index([escrowId])
  @@index([transactionHash])
  @@map("sponsor_deposits")
}

// Study eligibility criteria
model StudyCriteria {
  id String @id @default(cuid())

  // Study relation (one-to-one)
  studyId String @unique
  study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

  // Blockchain ID
  escrowId Int @unique

  // Age criteria (verified with Halo2/PLONK off-chain)
  minAge Int
  maxAge Int

  // Medical eligibility code hash (verified with Circom/Groth16 on-chain)
  eligibilityCodeHash String // Poseidon hash of required eligibility code

  // Detailed criteria (for display purposes)
  // Biomarkers
  hba1cMin       Float?
  hba1cMax       Float?
  ldlMin         Float?
  ldlMax         Float?
  cholesterolMin Float?
  cholesterolMax Float?
  hdlMin         Float?
  hdlMax         Float?
  triglyceridesMin Float?
  triglyceridesMax Float?

  // Vital Signs
  systolicBPMin  Float?
  systolicBPMax  Float?
  diastolicBPMin Float?
  diastolicBPMax Float?
  bmiMin         Float?
  bmiMax         Float?
  heartRateMin   Float?
  heartRateMax   Float?

  // Medications & Allergies (JSON arrays)
  requiredMedications String[] @default([])
  excludedMedications String[] @default([])
  excludedAllergies   String[] @default([])

  // Diagnoses (ICD-10 codes)
  requiredDiagnoses String[] @default([])
  excludedDiagnoses String[] @default([])

  // Blockchain tracking
  chainId         Int    @default(11155420)
  transactionHash String
  blockNumber     BigInt

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([escrowId])
  @@index([transactionHash])
  @@map("study_criteria")
}

// Study milestones for reward distribution
model StudyMilestone {
  id String @id @default(cuid())

  // Study relation
  studyId String
  study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

  // Blockchain IDs
  escrowId    Int
  milestoneId Int // Index in the escrow contract

  // Milestone details
  milestoneType MilestoneType
  description   String
  rewardAmount  Decimal       @db.Decimal(20, 2) // Amount in USDC

  // Blockchain tracking
  chainId         Int    @default(11155420)
  transactionHash String
  blockNumber     BigInt

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([escrowId, milestoneId])
  @@index([studyId])
  @@index([escrowId])
  @@index([transactionHash])
  @@map("study_milestones")
}

// Anonymous study applications with ZK proof
model StudyApplication {
  id String @id @default(cuid())

  // Study relation
  studyId String
  study   Study  @relation(fields: [studyId], references: [id], onDelete: Cascade)

  // Blockchain IDs
  registryId      Int // Study ID in StudyRegistry contract
  applicantNumber Int // Sequential number of applicant for this study

  // ZK Proof verification
  proofVerified        Boolean   @default(false)
  proofTransactionHash String?
  proofBlockNumber     BigInt?

  // Application status
  status     ApplicationStatus @default(pending)
  approvedBy String?           // Address of researcher/clinic who approved
  approvedAt DateTime?

  // Enrollment (SBT token)
  enrolled              Boolean   @default(false)
  enrollmentTokenId     Int?      // Token ID of StudyParticipationSBT
  enrollmentTxHash      String?
  enrollmentBlockNumber BigInt?

  // Patient identity (only known if enrolled by clinic)
  patientAddress    String? // Wallet address (only if clinic enrolled them)
  patientSBTTokenId Int?    // HealthIdentitySBT token ID (only if clinic enrolled them)

  // Blockchain tracking
  chainId                Int
  applicationTxHash      String
  applicationBlockNumber BigInt

  // Timestamps
  appliedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([registryId, applicantNumber])
  @@index([studyId])
  @@index([registryId])
  @@index([status])
  @@index([patientAddress])
  @@index([applicationTxHash])
  @@index([proofTransactionHash])
  @@map("study_applications")
}
