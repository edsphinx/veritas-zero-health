// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title AgeVerifier
 * @author edsphinx
 * @notice Verifies zero-knowledge proofs for age range eligibility
 * @dev This is a placeholder verifier contract. In production, this will be replaced
 * with the auto-generated UltraPlonk verifier from the Noir circuit using Barretenberg.
 *
 * Circuit: age_verification
 * Path: packages/circuits/age_verification/
 *
 * To generate the real verifier:
 * 1. cd packages/circuits/age_verification
 * 2. nargo compile
 * 3. bb write_vk -b target/age_verification.json
 * 4. bb contract -k target/vk -o AgeVerifier.sol
 *
 * Public Inputs:
 * - min_age: Minimum age requirement (e.g., 18)
 * - max_age: Maximum age requirement (e.g., 65)
 *
 * Private Inputs (hidden in proof):
 * - age: User's actual age
 *
 * The proof proves: min_age <= age <= max_age
 */
contract AgeVerifier {
    // Events for tracking verification attempts
    event ProofVerified(address indexed prover, uint32 minAge, uint32 maxAge, bool success);

    /**
     * @notice Verifies a zero-knowledge proof of age eligibility
     * @param proof The ZK proof bytes
     * @param minAge The minimum age requirement (public input)
     * @param maxAge The maximum age requirement (public input)
     * @return bool True if the proof is valid
     *
     * @dev PLACEHOLDER: In production, this function will call the UltraPlonk verifier
     * generated by Barretenberg. For now, we perform basic validation.
     */
    function verify(
        bytes calldata proof,
        uint32 minAge,
        uint32 maxAge
    ) external returns (bool) {
        // Placeholder validation logic
        // In production, this will be replaced with:
        // return UltraVerifier.verify(proof, [minAge, maxAge]);

        require(proof.length > 0, "Proof cannot be empty");
        require(minAge < maxAge, "Invalid age range");
        require(maxAge <= 150, "Max age too high");

        // For demo purposes, accept proof if it's non-empty and params are valid
        bool isValid = true;

        emit ProofVerified(msg.sender, minAge, maxAge, isValid);

        return isValid;
    }

    /**
     * @notice View-only version of verify that doesn't emit events
     * @dev Useful for off-chain validation before submitting a transaction
     */
    function verifyView(
        bytes calldata proof,
        uint32 minAge,
        uint32 maxAge
    ) external pure returns (bool) {
        require(proof.length > 0, "Proof cannot be empty");
        require(minAge < maxAge, "Invalid age range");
        require(maxAge <= 150, "Max age too high");

        return true; // Placeholder
    }
}
